/*
 * This file is generated by jOOQ.
 */
package advanced.jooq.model.tables;


import advanced.jooq.model.DefaultSchema;
import advanced.jooq.model.Keys;
import advanced.jooq.model.tables.records.NewUserRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NewUser extends TableImpl<NewUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>new_user</code>
     */
    public static final NewUser NEW_USER = new NewUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NewUserRecord> getRecordType() {
        return NewUserRecord.class;
    }

    /**
     * The column <code>new_user.id</code>.
     */
    public final TableField<NewUserRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>new_user.first_name</code>.
     */
    public final TableField<NewUserRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>new_user.last_name</code>.
     */
    public final TableField<NewUserRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    private NewUser(Name alias, Table<NewUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private NewUser(Name alias, Table<NewUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>new_user</code> table reference
     */
    public NewUser(String alias) {
        this(DSL.name(alias), NEW_USER);
    }

    /**
     * Create an aliased <code>new_user</code> table reference
     */
    public NewUser(Name alias) {
        this(alias, NEW_USER);
    }

    /**
     * Create a <code>new_user</code> table reference
     */
    public NewUser() {
        this(DSL.name("new_user"), null);
    }

    public <O extends Record> NewUser(Table<O> child, ForeignKey<O, NewUserRecord> key) {
        super(child, key, NEW_USER);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<NewUserRecord, Integer> getIdentity() {
        return (Identity<NewUserRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NewUserRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_5;
    }

    @Override
    public List<UniqueKey<NewUserRecord>> getKeys() {
        return Arrays.<UniqueKey<NewUserRecord>>asList(Keys.CONSTRAINT_5);
    }

    @Override
    public NewUser as(String alias) {
        return new NewUser(DSL.name(alias), this);
    }

    @Override
    public NewUser as(Name alias) {
        return new NewUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NewUser rename(String name) {
        return new NewUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NewUser rename(Name name) {
        return new NewUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
